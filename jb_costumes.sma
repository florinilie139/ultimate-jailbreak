/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <jailbreak_core>
#include <vip_base>

#define PLUGIN "[JB] Costumes"
#define VERSION "1.0"
#define AUTHOR "Natsheh"

enum _:COSTUME_MODELS
{
	SUBMODEL_NAME[32],
	MODEL_DIRECT[64],
	SUBMODEL_BODYID
}

enum _:COSTUMES
{
	HEAD_COSTUME = 0,
	BACK_COSTUME,
	TAIL_COSTUME,
	FEET_COSTUME,
	FULL_COSTUME,
	
	MAX_COSTUME
}

new const text_costumes[MAX_COSTUME][] = { "head", "back", "tail", "feet", "full costume" }

new Array:costume_array[MAX_COSTUME];
new g_count[MAX_COSTUME];
new g_user_costume[33][MAX_COSTUME];
new COSTUME_MENU, COSTUME_HEAD_MENU, COSTUME_BACK_MENU, COSTUME_TAIL_MENU, COSTUME_FEET_MENU, FULL_COSTUME_MENU;

public plugin_end()
{
	for(new i; i < MAX_COSTUME; i++)
	{
		ArrayDestroy(costume_array[i]);
	}
}

public plugin_precache()
{
	for(new i; i < MAX_COSTUME; i++)
	{
		costume_array[i] = ArrayCreate(100, 1); 
	}
	
	new sFile[64], file_name[] = "jailbreak_costumes.ini";
	get_configsdir(sFile, charsmax(sFile))
	format(sFile, charsmax(sFile), "%s/%s", sFile, file_name)
	
	new fp = fopen(sFile, "rt");
	
	if(fp)
	{
		new sbuffer[196], xArray[COSTUME_MODELS], i, bool:iskeyopen=false, key, szBodyid[6];
		
		while(!feof(fp))
		{
			fgets(fp, sbuffer, charsmax(sbuffer));
			trim(sbuffer);
			
			if(sbuffer[0] == ';' || sbuffer[0] == '/' && sbuffer[1] == '/' || strlen(sbuffer) <= 3) continue;
			
			if(sbuffer[0] == '[')
			{
				iskeyopen = false; key = -1;
				copyc(sbuffer, charsmax(sbuffer), sbuffer[1], ']')
				
				for(i = 0; i < MAX_COSTUME; i++)
				{
					if(equali(text_costumes[i], sbuffer, strlen(text_costumes[i])))
					{
						key = i;
						i = MAX_COSTUME;
					}
				}
				
				if(key > -1)
				{
					iskeyopen = true;
					continue;
				}
			}
			else if(iskeyopen && key > -1)
			{
				parse(sbuffer, xArray[SUBMODEL_NAME], 31, xArray[MODEL_DIRECT], 63, szBodyid, charsmax(szBodyid))
				remove_quotes(szBodyid)
				for(i = 0; i < 2; i++) remove_quotes(xArray[i]);
				xArray[SUBMODEL_BODYID] = str_to_num(szBodyid);
				
				precache_model(xArray[MODEL_DIRECT]);
				ArrayPushArray(costume_array[key], xArray);
				g_count[key] ++;
			}
		}
		
		fclose(fp);
	}
	else if(!file_exists(sFile))
	{
		plugin_end();
		
		new sBuffer[64];
		
		for(new i; i < MAX_COSTUME; i++)
		{
			formatex(sBuffer, charsmax(sBuffer), "[%s]^n", text_costumes[i])
			write_file(sFile, sBuffer);
		}
	}
}


public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_clcmd("say /costume", "clcmd_costume")
	
	const NO_ACCESS = (1<<26);
	
	COSTUME_MENU = menu_create("Alege o optiune!", "menu_handler")
	menu_additem(COSTUME_MENU, "Costum pentru cap!", _, g_count[HEAD_COSTUME] > 0 ? 0:NO_ACCESS)
	menu_additem(COSTUME_MENU, "Costum pentru spate!", _, g_count[BACK_COSTUME] > 0 ? 0:NO_ACCESS)
	menu_additem(COSTUME_MENU, "Costum pentru coada!", _, g_count[TAIL_COSTUME] > 0 ? 0:NO_ACCESS)
	menu_additem(COSTUME_MENU, "Costum pentru fata!", _, g_count[FEET_COSTUME] > 0 ? 0:NO_ACCESS)
	menu_additem(COSTUME_MENU, "Costume intregi!", _, g_count[FULL_COSTUME] > 0 ? 0:NO_ACCESS)
	menu_additem(COSTUME_MENU, "Scoate toate costumele!")
	
	new xArray[COSTUME_MODELS], size;
	
	COSTUME_HEAD_MENU = menu_create("Alege-ti \r[costumul pentru CAP]", "menu_handler");
	
	size = ArraySize(Array:costume_array[_:HEAD_COSTUME]);
	
	for(new i; i < size; i++)
	{
		ArrayGetArray(Array:costume_array[_:HEAD_COSTUME], i, xArray)
		menu_additem(COSTUME_HEAD_MENU, xArray[SUBMODEL_NAME])
	}
	
	COSTUME_BACK_MENU = menu_create("Alege-ti \r[costumul pentru SPATE]", "menu_handler");
	
	size = ArraySize(Array:costume_array[BACK_COSTUME]);
	
	for(new i; i < size; i++)
	{
		ArrayGetArray(Array:costume_array[BACK_COSTUME], i, xArray)
		menu_additem(COSTUME_BACK_MENU, xArray[SUBMODEL_NAME])
	}
	
	COSTUME_TAIL_MENU = menu_create("Alege-ti \r[costumul pentru COADA]", "menu_handler");
	
	size = ArraySize(Array:costume_array[TAIL_COSTUME]);
	
	for(new i; i < size; i++)
	{
		ArrayGetArray(Array:costume_array[TAIL_COSTUME], i, xArray)
		menu_additem(COSTUME_TAIL_MENU, xArray[SUBMODEL_NAME])
	}
	
	COSTUME_FEET_MENU = menu_create("Alege-ti \r[costumul pentru FATA]", "menu_handler");
	
	size = ArraySize(Array:costume_array[FEET_COSTUME]);
	
	for(new i; i < size; i++)
	{
		ArrayGetArray(Array:costume_array[FEET_COSTUME], i, xArray)
		menu_additem(COSTUME_FEET_MENU, xArray[SUBMODEL_NAME])
	}
	
	FULL_COSTUME_MENU = menu_create("Alege-ti \r[costumul INTREG]", "menu_handler");
	
	size = ArraySize(Array:costume_array[FULL_COSTUME]);
	
	for(new i; i < size; i++)
	{
		ArrayGetArray(Array:costume_array[FULL_COSTUME], i, xArray)
		menu_additem(FULL_COSTUME_MENU, xArray[SUBMODEL_NAME])
	}
}

public menu_handler(id, menu, item)
{
	if(item == MENU_EXIT) return PLUGIN_HANDLED;
	
	if(menu == COSTUME_MENU)
	{
		switch( item )
		{
			case 0: menu_display(id, COSTUME_HEAD_MENU)
			case 1: menu_display(id, COSTUME_BACK_MENU)
			case 2: menu_display(id, COSTUME_TAIL_MENU)
			case 3: menu_display(id, COSTUME_FEET_MENU)
			case 4: menu_display(id, FULL_COSTUME_MENU)
			case 5:
			{
				remove_player_costumes(id, _:FULL_COSTUME)
				cprint_chat(id, _, "^4**^1* Ti-ai scos toate costumele *^4**")
				menu_display(id, COSTUME_MENU)
			}
		}
		
		return PLUGIN_HANDLED;
	}
	
	new xArray[COSTUME_MODELS];
	
	if(menu == FULL_COSTUME_MENU)
	{
		ArrayGetArray(Array:costume_array[FULL_COSTUME], item, xArray)
		remove_player_costumes(id, FULL_COSTUME)
		costume(id, TAIL_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID])
		cprint_chat(id, _, "^4**^1* Ai ales %s pentru costumul intreg*^4**", xArray[SUBMODEL_NAME])
		menu_display(id, COSTUME_MENU)
		return PLUGIN_HANDLED;
	}
	
	if(g_user_costume[id][FULL_COSTUME] > 0)
	{
		remove_player_costumes(id, FULL_COSTUME)
	}
	
	if(menu == COSTUME_HEAD_MENU)
	{
		ArrayGetArray(Array:costume_array[HEAD_COSTUME], item, xArray)
		remove_player_costumes(id, HEAD_COSTUME)
		costume(id, _:HEAD_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID])
		cprint_chat(id, _, "^4**^1* Ai ales %s pentru costumul de cap *^4**", xArray[SUBMODEL_NAME])
		menu_display(id, COSTUME_MENU)
		return PLUGIN_HANDLED;
	}
	if(menu == COSTUME_BACK_MENU)
	{
		ArrayGetArray(Array:costume_array[BACK_COSTUME], item, xArray)
		remove_player_costumes(id, BACK_COSTUME)
		costume(id, BACK_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID])
		cprint_chat(id, _, "^4**^1* Ai ales %s pentru costumul de spate *^4**", xArray[SUBMODEL_NAME])
		menu_display(id, COSTUME_MENU)
		return PLUGIN_HANDLED;
	}
	if(menu == COSTUME_TAIL_MENU)
	{
		ArrayGetArray(Array:costume_array[TAIL_COSTUME], item, xArray)
		remove_player_costumes(id, TAIL_COSTUME)
		costume(id, TAIL_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID])
		cprint_chat(id, _, "^4**^1* Ai ales %s pentru costumul de coada *^4**", xArray[SUBMODEL_NAME])
		menu_display(id, COSTUME_MENU)
		return PLUGIN_HANDLED;
	}
	if(menu == COSTUME_FEET_MENU)
	{
		ArrayGetArray(Array:costume_array[FEET_COSTUME], item, xArray)
		remove_player_costumes(id, FEET_COSTUME)
		costume(id, TAIL_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID])
		cprint_chat(id, _, "^4**^1* Ai ales %s pentru costumul de fata *^4**", xArray[SUBMODEL_NAME])
		menu_display(id, COSTUME_MENU)
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_HANDLED;
}

public clcmd_costume(id)
{
	if((get_user_flags(id) & ADMIN_SLAY) || get_vip_type(id) > 0)
		menu_display(id, COSTUME_MENU)
	else
		cprint_chat(id, _, "^4**^1* Nu ai acces sa iti pui costume *^4**")
}

public client_disconnect(id)
{
	remove_player_costumes(id, FULL_COSTUME)
}

remove_player_costumes(id, Part)
{
	switch( Part )
	{
		case FULL_COSTUME:
		{
			for(new COSTUMES:i, j; _:i < _:MAX_COSTUME; i++)
			{
				j = g_user_costume[id][_:i];
				if(j > 0)
				{
					if(pev_valid(j)) engfunc(EngFunc_RemoveEntity, j);
					
					g_user_costume[id][_:i] = _:0;
				}
			}
		}
		default:
		{
			new j = g_user_costume[id][Part];
			if(j > 0)
			{
				if(pev_valid(j)) engfunc(EngFunc_RemoveEntity, j);
				
				g_user_costume[id][Part] = 0;
			}
		}
	}
}

public costume(id, _:part, model[], anim)
{
	new ent = g_user_costume[id][part];
	
	if(!ent || !pev_valid(ent))
	{
		ent = g_user_costume[id][part] = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"));
		
		if(!ent) return;
		
		set_pev(ent, pev_movetype, MOVETYPE_FOLLOW)
		set_pev(ent, pev_aiment, id)
		set_pev(ent, pev_rendermode, kRenderNormal)
		engfunc(EngFunc_SetModel, ent, model)
	}
	
	set_pev(ent, pev_body, anim)
	set_pev(ent, pev_sequence, anim)
	set_pev(ent, pev_animtime, get_gametime())
	set_pev(ent, pev_framerate, 1.0)
}
